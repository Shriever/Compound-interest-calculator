{"version":3,"sources":["Components/InvestmentForm.tsx","images/typescript-logo.png","images/react-logo.png","images/sass-logo.png","Components/About.tsx","utils/Calculator.ts","utils/findInputSource.ts","utils/validateInputs.ts","App.tsx","index.tsx"],"names":["InvestmentForm","props","handleFormChange","inputs","className","numeral","total","format","Form","Group","controlId","Label","Control","min","type","name","value","principal","onChange","fieldErrors","Alert","variant","annualContribution","timeSpan","max","rateOfReturn","About","src","reactLogo","alt","width","typescriptLogo","sassLogo","calculateCompoundSeries","contribution","rate","calculateCompoundPrincipal","calculateCompound","data","Math","ceil","findInputSource","e","prevState","inputName","target","inputValue","Number","validateInputs","setFieldErrors","newFieldErrors","App","useState","setInputs","setTotal","useCallback","useEffect","investmentFormProps","Container","to","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.09d0a8af.chunk.js","sourcesContent":["import { Form, Alert } from \"react-bootstrap\";\nimport { Props } from \"./../utils/interfaces\";\nimport numeral from \"numeral\";\n\nconst InvestmentForm = (props: Props) => {\n  const { handleFormChange, inputs } = props;\n  return (\n    <>\n      <h2 className='future-balance'>Future Balance</h2>\n      <h2 className='total'>${numeral(props.total).format(\"0,0\")}</h2>\n\n      <Form className='bt-1 investment-form'>\n        <Form.Group controlId='formBasicPrincipal'>\n          <Form.Label>Initial Investment</Form.Label>\n          <Form.Control\n            className='form-input'\n            min='100'\n            type='number'\n            name='principal'\n            value={inputs.principal}\n            onChange={handleFormChange}\n          />\n          {props.fieldErrors.principal && (\n            <Alert variant='danger' className='form-error'>\n              {props.fieldErrors.principal}\n            </Alert>\n          )}\n        </Form.Group>\n        <Form.Group controlId='formBasicContributions'>\n          <Form.Label>Annual Contribution</Form.Label>\n          <Form.Control\n            className='form-input'\n            min='0'\n            type='number'\n            name='annual-contribution'\n            value={inputs.annualContribution}\n            onChange={handleFormChange}\n          />\n          {props.fieldErrors.annualContribution && (\n            <Alert variant='danger' className='form-error'>\n              {props.fieldErrors.annualContribution}\n            </Alert>\n          )}\n        </Form.Group>\n        <Form.Group controlId='formBasicTimeSpan'>\n          <Form.Label>Investment Time Span in Years</Form.Label>\n          <Form.Control\n            className='form-input'\n            min='0'\n            type='number'\n            name='time-span'\n            value={inputs.timeSpan}\n            onChange={handleFormChange}\n          />\n          {props.fieldErrors.timeSpan && (\n            <Alert variant='danger' className='form-error'>\n              {props.fieldErrors.timeSpan}\n            </Alert>\n          )}\n        </Form.Group>\n        <Form.Group controlId='formBasicRateOfReturn'>\n          <Form.Label>Annual Rate of Return</Form.Label>\n          <Form.Control\n            className='form-input'\n            min='1'\n            max='1000'\n            type='number'\n            name='rate-of-return'\n            value={inputs.rateOfReturn}\n            onChange={handleFormChange}\n          />\n          {props.fieldErrors.rateOfReturn && (\n            <Alert variant='danger' className='form-error'>\n              {props.fieldErrors.rateOfReturn}\n            </Alert>\n          )}\n        </Form.Group>\n      </Form>\n    </>\n  );\n};\n\nexport default InvestmentForm;\n","export default __webpack_public_path__ + \"static/media/typescript-logo.57404d48.png\";","export default __webpack_public_path__ + \"static/media/react-logo.60daf01b.png\";","export default __webpack_public_path__ + \"static/media/sass-logo.c5213e47.png\";","import typescriptLogo from \"./../images/typescript-logo.png\";\nimport reactLogo from \"./../images/react-logo.png\";\nimport sassLogo from \"./../images/sass-logo.png\";\n\nconst About = () => {\n  return (\n    <div>\n      <h2>Challenges</h2>\n      <p className='about-text'>\n        I'd say that the most challenging parts of this project had to be\n        <br /> 1) Adapting to typescript and <br /> 2) Figuring out how to\n        calculate compound interest. I felt comfortable with primitive types\n        thanks to my experience with the C programming language which I worked\n        with in Harvard's CS50 course. But defining types for functions and\n        React Hooks definitely took some getting used to.\n      </p>\n      <br />\n      <h2>Tech Used</h2>\n      <div className='about-images'>\n        <img src={reactLogo} alt='' width='200' />\n        <img src={typescriptLogo} alt='' width='200' />\n        <img src={sassLogo} alt='' width='200' />\n      </div>\n    </div>\n  );\n};\n\nexport default About;\n","import { userData } from \"./interfaces\";\n\nconst calculateCompound = (data: userData) => {\n  const { principal, annualContribution, timeSpan, rateOfReturn } = data;\n\n  const rate = rateOfReturn / 100;\n\n  const investmentTotal = calculateCompoundPrincipal(principal, rate, timeSpan);\n\n  const contributionTotal = calculateCompoundSeries(\n    annualContribution,\n    rate,\n    timeSpan\n  );\n\n  const total = investmentTotal + contributionTotal;\n\n  return Math.ceil(total);\n};\n\nconst calculateCompoundSeries = (\n  contribution: number,\n  rate: number,\n  timeSpan: number\n) => {\n  const total: number =\n    contribution * (((1 + rate) ** timeSpan - 1) / rate) * (1 + rate);\n\n  return total;\n};\n\nconst calculateCompoundPrincipal = (\n  principal: number,\n  rate: number,\n  timeSpan: number\n) => {\n  const total: number = principal * (1 + rate) ** timeSpan;\n\n  return total;\n};\n\nexport default calculateCompound;\n","const findInputSource = (e: any, prevState: any) => {\n  const inputName: string = e.target.name;\n  const inputValue: number = e.target.value;\n  if (inputName === \"principal\") {\n    return {\n      ...prevState,\n      principal: Number(inputValue),\n    };\n  } else if (inputName === \"annual-contribution\") {\n    return {\n      ...prevState,\n      annualContribution: inputValue,\n    };\n  } else if (inputName === \"time-span\") {\n    return {\n      ...prevState,\n      timeSpan: inputValue,\n    };\n  } else if (inputName === \"rate-of-return\") {\n    return {\n      ...prevState,\n      rateOfReturn: inputValue,\n    };\n  }\n  return prevState;\n};\n\nexport default findInputSource;\n","import { fieldErrors, userData } from \"./interfaces\";\n\nconst validatePrincipal = (principal: number) => {\n  if (principal <= 0) return \"Please enter an investment amount above 0\";\n  return \"\";\n};\n\nconst validateAnnualContributions = (annualContribution: number) => {\n  if (annualContribution < 0) return \"Contribution amount cannot be negative\";\n  return \"\";\n};\n\nconst validateTimeSpan = (timeSpan: number) => {\n  if (timeSpan <= 0) return \"Please enter a time span above 0\";\n  return \"\";\n};\n\nconst validateRateOfReturn = (rateOfReturn: number) => {\n  if (rateOfReturn <= 0) return \"Please enter a rate of return above 0\";\n  return \"\";\n};\n\nconst validateInputs = (inputs: userData, setFieldErrors: any) => {\n  const newFieldErrors: fieldErrors = {\n    principal: \"\",\n    annualContribution: \"\",\n    timeSpan: \"\",\n    rateOfReturn: \"\",\n  };\n  newFieldErrors.principal = validatePrincipal(inputs.principal);\n  newFieldErrors.annualContribution = validateAnnualContributions(\n    inputs.annualContribution\n  );\n  newFieldErrors.timeSpan = validateTimeSpan(inputs.timeSpan);\n  newFieldErrors.rateOfReturn = validateRateOfReturn(inputs.rateOfReturn);\n\n  setFieldErrors(newFieldErrors);\n};\n\nexport default validateInputs;\n","import { useCallback, useEffect, useState } from \"react\";\nimport { Switch, Route, Redirect, Link } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport InvestmentForm from \"./Components/InvestmentForm\";\nimport About from \"./Components/About\";\nimport calculateCompound from \"./utils/Calculator\";\nimport findInputSource from \"./utils/findInputSource\";\nimport validateInputs from \"./utils/validateInputs\";\nimport { fieldErrors } from \"./utils/interfaces\";\nimport { Container } from \"react-bootstrap\";\n\nconst App = () => {\n  const [inputs, setInputs] = useState({\n    principal: 10000,\n    annualContribution: 100,\n    timeSpan: 5,\n    rateOfReturn: 10,\n  });\n  const [total, setTotal] = useState<number>(0);\n  const [fieldErrors, setFieldErrors] = useState<fieldErrors>({\n    principal: \"\",\n    annualContribution: \"\",\n    timeSpan: \"\",\n    rateOfReturn: \"\",\n  });\n\n  const handleFormChange = useCallback(\n    (e: any) => {\n      validateInputs(inputs, setFieldErrors);\n      setInputs(prevState => {\n        return findInputSource(e, prevState);\n      });\n      setTotal(calculateCompound(inputs));\n    },\n    [inputs]\n  );\n\n  useEffect(() => {\n    handleFormChange({ target: { name: \"\" } });\n  }, [handleFormChange]);\n\n  const investmentFormProps = { handleFormChange, inputs, fieldErrors, total };\n\n  return (\n    <Container className='app'>\n      <Link to='/Compound-interest-calculator' className='link'>\n        Calculator\n      </Link>\n      <Link to='/about' className='link'>\n        About\n      </Link>\n      <h1 className='text-center'>Levi's Compound Interest Calculator</h1>\n      <Switch>\n        <Route exact path='/Compound-interest-calculator'>\n          <InvestmentForm {...investmentFormProps} />\n        </Route>\n        <Route exact path='/about' component={About} />\n        <Route path='*'>\n          <Redirect to='/Compound-interest-calculator' />\n        </Route>\n      </Switch>\n    </Container>\n  );\n};\n\nexport default App;\n","import React, { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <StrictMode>\n      <App />\n    </StrictMode>\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}